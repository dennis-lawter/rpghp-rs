#+STARTUP: showall
#+TODO: TODO(t) WIP(w) | DONE(d) CANCELLED(c)
#+TITLE: Todo

* TODO First time dev setup script

* TODO Consider switching from the uuidv4 dashed hex to a base64

* TODO Add unit testing
** TODO Add test coverage tracker
** TODO Extract sql to a separate mod or something to create an ideal mockable sql interface
** TODO Consider refactoring API & partial input/output schemas out of the endpoint mods
** TODO Add unit testing to git automation or github actions
** TODO Add httpyac e2e test to git automation or github actions

* TODO Implement string limits
** TODO Switch to max width varchars for most strings
** TODO Implement a truncate/reject system for incoming strings

* TODO Consider switching from double uuidv4 creation to a hashing algorithm
    - Creating simultaneous uuidv4 values doesn't create much entropy between the two values

* TODO Consider adding creatures to a detailed session view and attach it to the GET endpoint
    - This is kind of a violation of the "resource" aspect of the API
    - It does reduce total endpoint hits to get the full details though
    - Alternatively provide a "detailed" param
    - For internal use, I expect the partials layer will do much of the aggregation

* TODO Improve domain error handling
** TODO Introduce a trait for the ApiResponses to enforce from_domain_error
** TODO See if there's any way to DRY or otherwise organize the responses

-----

* WIP Implement initiative tracking
    - Normalize by creating ~initiative_groups~
    - Each creature belongs to exactly 1 initiative_group
    - The group uses btree ordering across a size of u64 "ranks"
    - First insertion is at 0x100..00
    - Next insertion is at 0x0100..00 (left) or 0x1100..00 (right)
    - Whenever a tail insertion is done, I think it's always:
        - x = current tail
        - new_spot = x + (x >> 1)
        - We must rebuild when the tail is 0x11..11
    - Whenever a head insertion is done, I think it's always:
        - x = current head
        - new_spot = x >> 1
        - We must rebuild when the head is 0x00..001
    - Whenever an inner insertion is done, find the 2 adjacent nodes
        - x = left node
        - y = right node
        - dist = x - y
        - new_spot = x + dist
        - We must rebuild when dist = 1
    - To rebuild:
        - Always rebuild after the insertion that causes the need to rebuild
        - Rebuilding is done by flattening the list, ordered
        - Take the middle item
            - If we have an even number, take the right-most of the two
            - This leaves a tiny bit more space for tail insertions, which I believe to be most common
        - Insert the middle at 0x100..00
        - Continue recursively inserting all items
        - Finally push the new ranks as UPDATE sql statements
** TODO Initiative group endpoints
    - Hide the raw "ranks" from the API
    - Instead use an "insert_after" field, nullable (meaning first in order)
** TODO Implement a max creature limit
    - Technically we're more concerned with an initiative limit, but a creature limit should exist anyway
    - Probably 64, 100, or 128 just to be safe but that's probably overkill
        - In D&D the DM should switch to "swarm" mechanics to reduce complexity

* WIP Add logging
    - need access logs at least

* WIP In-code docs

* WIP Create a new mockup
** DONE Install rpgui
** DONE Figure out why rpgui mockup won't scroll
** DONE Figure out why rpgui progress bars don't respond to values
** TODO Convert old mockup to rpgui
** TODO Populate mockup with handlebars

* WIP Creature endpoint
** DONE Stub out the creature resources
** DONE Add creature saving logic to the create endpoint
** DONE Get creature endpoint
** DONE List creature endpoint
** TODO Create creature returns the record or a redirect header
    - If we choose the redirect header, make the session do the same
** DONE Change the way HP is handled in CreatureView
    - Always display approx_hp
    - Restrict max_hp and curr_hp response to *secret provided* or *show_hp = true*
** TODO Creature deletion endpoint, need to decide if deletes should be soft or hard
** TODO Creature PUT endpoint
** TODO Creature PATCH endpoint
    - Schema is fully optional
    - Must have at least 1 set field
    - Add "diff_curr_hp" and "diff_max_hp" which takes an i32 and applies the difference to the value

* WIP Partials layer
** DONE Create the layer
** TODO Create the playerview creature partial
** TODO Create the gmview creature partial

* WIP External asset cleanup
** DONE Move external assets to a separate folder
** TODO Consider pulling the external assets in another way
    - Git submodules?
    - A wget for the icons?
** TODO Attribute external assets properly
** TODO Make a tokei Makefile target, exclude the external assets

* WIP Create a more expressive icon system
** TODO /api/v1/icon?base=some_svg&color=some_hex
    - Should this even live in /api? It's probably fine, it is a resource...
    - Reads in a base svg
    - Can alter the stroke color
    - Can blit the SVG over a background
    - Can decorate with a second svg overlay or mask maybe?
    - Need to give players the ability to set these icons for creatures
    - May want the ability to save icon configurations for later or copy from existing
** DONE Add an icon url to the creature, must be a local url

-----

* DONE Write a design pattern overview

* DONE Improve error handling

* DONE Import old mockup

* DONE Extract domain

* DONE Improve session secret/id system
    - In my previous rpghp project, I created a uuidv4 for the session secret.
    - The sha1 of that was the session id.
    - Only the session id is stored in the DB, meaning secrets cannot be retrieved.
    - The uuidv4 and sha1 of the uuidv4 can both be represented by a relatively small base64 in the url.
    - Currently the secret being in the URL is insecure;
      however I don't think too critically today about the security of a tabletop RPG helper...
    - I recently discovered the path of /session/:session_id must always have the same named parameter
        + This means that the random swap between :session_id_or_secret and :secret is not allowed
        + Could move the "admin" endpoints
        + Could make secret an auth header or something
        + Could ditch the whole idea of the generated password
        + Maybe the frontend just deals with this?
            + I think the frontend will be /playerview/SESSION_ID and /gmview/SECRET

* DONE Consider extracting the domain even higher
    - Both the API and the partials will use the domain
    - May want to bury the db pool inside of a Domain struct to make random querying impossible

* DONE Setup tests for the REST framework with httpyac
** DONE Setup a basic end to end test
** DONE Setup w/ environment to define host/port
