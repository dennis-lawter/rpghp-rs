#+STARTUP: showall
#+TODO: TODO(t) WIP(w) | DONE(d) CANCELLED(c)
#+TITLE: Todo

* DONE Improve error handling
* DONE Import old mockup
* DONE Extract domain

* TODO Create a new mockup
** DONE Install rpgui
** DONE Figure out why rpgui mockup won't scroll
** DONE Figure out why rpgui progress bars don't respond to values
** TODO Convert old mockup to rpgui
** TODO Populate mockup with handlebars

* TODO Document code

* TODO Add logging

* TODO Consider adding creatures to a detailed session view and attach it to the GET endpoint
    - This is kind of a violation of the "resource" aspect of the API
    - It does reduce total endpoint hits to get the full details though
    - Alternatively provide a "detailed" param

* TODO Creature endpoint
** DONE Stub out the creature resources
** DONE Add creature saving logic to the create endpoint
** DONE Get creature endpoint
** DONE List creature endpoint
** TODO Create creature returns the record or a redirect header
    - If we choose the redirect header, make the session do the same
** DONE Change the way HP is handled in CreatureView
    - Always display approx_hp
    - Restrict max_hp and curr_hp response to *secret provided* or *show_hp = true*
** TODO Creature deletion endpoint, need to decide if deletes should be soft or hard
** TODO Creature update endpoint

* DONE Improve session secret/id system
    - In my previous rpghp project, I created a uuidv4 for the session secret, then the sha1 of that was the session id
    - Only the session id is stored in the DB, meaning secrets cannot be retrieved
    - The uuidv4 and sha1 of the uuidv4 can both be represented by a relatively small base64 in the url
    - Currently the secret being in the URL is insecure; however I don't think too critically today about the security of a tabletop RPG helper...
    - I recently discovered the path of /session/:session_id/... must always have the same named parameter
        + This means that the random swap between :session_id_or_secret and :secret is not allowed
        + Could move the "admin" endpoints
        + Could make secret an auth header or something
        + Could ditch the whole idea of the generated password
        + Maybe the frontend just deals with this?
            + I think the frontend will be /playerview/SESSION_ID and /gmview/SECRET

* TODO Decide on a framework for the frontend, I'm leaning toward htmx
    - Can htmx use json bodies for the api, or is it only multiforms?

* TODO Probably need a new module for frontend intermediates, little ajaxable HTML pieces that can be queried
    - The POST endpoints on this intermediate?
        + If htmx can't construct json easily, this intermediate layer might be a place to do multiforms
        + otherwise the API could probably accept multiple input types

* TODO External asset cleanup
** DONE Move external assets to a separate folder
** TODO Consider pulling the external assets in another way
    - Git submodules?
    - A wget for the icons?
** TODO Attribute external assets properly
** TODO Make a tokei Makefile target, exclude the external assets

* TODO Test the REST framework with httpyac
** DONE Setup a basic end to end test
** TODO Setup w/ environment to define host/port

* TODO Create an endpoint that generates icons more programatically
    - Reads in a base svg
    - Can alter the stroke color
    - Can blit the SVG over a background
    - Can decorate with a second svg overlay or mask maybe?
    - Need to give players the ability to set these icons for creatures
    - May want the ability to save icon configurations for later or copy from existing
** TODO Add an icon url to the creature, must be a local url
